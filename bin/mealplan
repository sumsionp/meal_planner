#!/usr/bin/env ruby

require 'date'
require_relative '../lib/meal_planner/validator'
require_relative '../lib/meal_planner/meal'
require_relative '../lib/meal_planner/menu_day'
require_relative '../lib/meal_planner/menu'

meals = []

default_meals_file = File.join(File.dirname(__FILE__), 'meals.csv')

File.open(default_meals_file, "r") do |file|
  file.readlines.each { |line| meals << MealPlanner::Meal.new(line) }
end

loop do
  puts "\nWelcome to Meal Planner"

  puts "\nPlease enter the number of days to plan for"
  number_of_days = MealPlanner::Validator.validate(/^\d+$/) do
    puts "example: 7"
    gets.chomp
  end

  #puts "\nPlease enter the date to start menu or Enter if today"
  #start_date = MealPlanner::Validator.validate(/^(0{,1}[1-9]|1[0-2])\/(0{,1}[1-9]|[12][0-9]|3[01])\/\d{4}$/) do
    #puts "example: 2/13/2013 for Feb. 13, 2013"
    #gets.chomp
  #end

  puts "\nPlanning for #{number_of_days} days." #starting on #{start_date}."

  menu = MealPlanner::Menu.new(Integer(number_of_days))
  menu.plan(meals)

  menu.each_menu_day do |menu_day|
    puts menu_day
  end

  loop do

    planned_meals = []
    menu.each_planned_meal do |meal|
      planned_meals << meal
    end

    puts "\nPlease enter 'quit' to exit or hit Enter key to continue"
    command = gets.chomp

    if command == 'quit'
      File.open("menu.txt", "w") do |file|
        menu.each_menu_day { |menu_day| file << menu_day }
      end
      break
    end

    puts "\nPlease choose a meal or two to switch:\n"
    planned_meals.each_with_index do |meal, i|
      puts "#{i} #{meal}"
    end

    validated = false

    until validated do

      meal_numbers_string = MealPlanner::Validator.validate(/^([0-9])([0-9]{1,})?(,([0-9])([0-9]{1,})?)?$/) do
        puts "Example: 5\nExample: 2,4"
        gets.chomp
      end

      meal_numbers = []

      meal_numbers_string.split(",").each do |meal_number_string|
        if (0..planned_meals.size).to_a.include? meal_number_string.to_i
          meal_numbers << Integer(meal_number_string)
          validated = true
        else
          validated = false
        end
      end
    end

    if meal_numbers.size == 1
      meal1, meal2 = planned_meals[meal_numbers[0]], nil
    else
      meal1, meal2 = planned_meals[meal_numbers[0]], planned_meals[meal_numbers[1]]
    end

    menu.switch(meal1, meal2)

    menu.each_menu_day { |menu_day| puts menu_day }
  end
  break
end
